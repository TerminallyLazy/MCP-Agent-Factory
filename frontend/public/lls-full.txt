# Model Context Protocol (MCP) Documentation

## Overview

The Model Context Protocol (MCP) is a standard that enables AI models to interact with external tools and capabilities, allowing them to leverage functionality beyond their training data and core capabilities.

## Core Concepts

### Servers

MCP servers provide tools to AI models. Each server typically focuses on a specific domain or capability:

- **Filesystem Server**: Provides access to the local filesystem
- **Brave Search Server**: Enables web search capabilities
- **Fetch Server**: Allows fetching content from URLs
- **Memory Server**: Provides persistent memory capabilities

### Tools

Tools are functions that models can use to perform specific tasks:

- Each tool has a name, description, and schema for its parameters
- Tools can perform actions like reading files, searching the web, etc.
- Tools are exposed to models through a standardized interface

### Clients

MCP clients connect models to MCP servers:

- They handle communication between models and servers
- They convert model requests to server calls
- They manage server lifecycle and cleanup

## Python Implementation

### Required Dependencies

```
pydantic-ai>=0.1.1
mcp>=0.1.0
```

### Basic MCP Client

```python
from pydantic_ai import RunContext, Tool as PydanticTool
from pydantic_ai.tools import ToolDefinition
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from mcp.types import Tool as MCPTool
from contextlib import AsyncExitStack
import asyncio
import logging
import shutil
import json
import os

class MCPClient:
    """Manages connections to one or more MCP servers based on mcp_config.json"""

    def __init__(self) -> None:
        self.servers = []
        self.config = {}
        self.tools = []
        self.exit_stack = AsyncExitStack()

    def load_servers(self, config_path: str) -> None:
        """Load server configuration from a JSON file (typically mcp_config.json)
        and creates an instance of each server (no active connection until 'start' though).

        Args:
            config_path: Path to the JSON configuration file.
        """
        with open(config_path, "r") as config_file:
            self.config = json.load(config_file)

        self.servers = [MCPServer(name, config) for name, config in self.config["mcpServers"].items()]

    async def start(self):
        """Starts each MCP server and returns the tools for each server formatted for Pydantic AI."""
        self.tools = []
        for server in self.servers:
            try:
                await server.initialize()
                tools = await server.create_pydantic_ai_tools()
                self.tools += tools
            except Exception as e:
                logging.error(f"Failed to initialize server: {e}")
                await self.cleanup_servers()
                return []

        return self.tools

    async def cleanup_servers(self) -> None:
        """Clean up all servers properly."""
        for server in self.servers:
            try:
                await server.cleanup()
            except Exception as e:
                logging.warning(f"Warning during cleanup of server {server.name}: {e}")

    async def cleanup(self) -> None:
        """Clean up all resources including the exit stack."""
        try:
            # First clean up all servers
            await self.cleanup_servers()
            # Then close the exit stack
            await self.exit_stack.aclose()
        except Exception as e:
            logging.warning(f"Warning during final cleanup: {e}")


class MCPServer:
    """Manages MCP server connections and tool execution."""

    def __init__(self, name: str, config: dict) -> None:
        self.name = name
        self.config = config
        self.stdio_context = None
        self.session = None
        self._cleanup_lock = asyncio.Lock()
        self.exit_stack = AsyncExitStack()

    async def initialize(self) -> None:
        """Initialize the server connection."""
        command = (
            shutil.which("npx")
            if self.config["command"] == "npx"
            else self.config["command"]
        )
        if command is None:
            raise ValueError("The command must be a valid string and cannot be None.")

        server_params = StdioServerParameters(
            command=command,
            args=self.config["args"],
            env=self.config["env"]
            if self.config.get("env")
            else None,
        )
        try:
            stdio_transport = await self.exit_stack.enter_async_context(
                stdio_client(server_params)
            )
            read, write = stdio_transport
            session = await self.exit_stack.enter_async_context(
                ClientSession(read, write)
            )
            await session.initialize()
            self.session = session
        except Exception as e:
            logging.error(f"Error initializing server {self.name}: {e}")
            await self.cleanup()
            raise

    async def create_pydantic_ai_tools(self):
        """Convert MCP tools to pydantic_ai Tools."""
        tools = (await self.session.list_tools()).tools
        return [self.create_tool_instance(tool) for tool in tools]            

    def create_tool_instance(self, tool: MCPTool) -> PydanticTool:
        """Initialize a Pydantic AI Tool from an MCP Tool."""
        async def execute_tool(**kwargs):
            return await self.session.call_tool(tool.name, arguments=kwargs)

        async def prepare_tool(ctx: RunContext, tool_def: ToolDefinition):
            tool_def.parameters_json_schema = tool.inputSchema
            return tool_def
        
        return PydanticTool(
            execute_tool,
            name=tool.name,
            description=tool.description or "",
            takes_ctx=False,
            prepare=prepare_tool
        )

    async def cleanup(self) -> None:
        """Clean up server resources."""
        async with self._cleanup_lock:
            try:
                await self.exit_stack.aclose()
                self.session = None
                self.stdio_context = None
            except Exception as e:
                logging.error(f"Error during cleanup of server {self.name}: {e}")
```

### Creating an Agent with MCP Tools

```python
from pydantic_ai import Agent
from pydantic_ai.models.openai import OpenAIModel
from mcp_client import MCPClient
import asyncio
import pathlib
import os

# Define config path
SCRIPT_DIR = pathlib.Path(__file__).parent.resolve()
CONFIG_FILE = SCRIPT_DIR / "mcp_config.json"

async def create_agent():
    # Initialize MCP client
    client = MCPClient()
    client.load_servers(str(CONFIG_FILE))
    
    # Get MCP tools
    tools = await client.start()
    
    # Create model
    model = OpenAIModel(
        "gpt-4o-mini",
        api_key=os.getenv("OPENAI_API_KEY")
    )
    
    # Create agent with tools
    agent = Agent(model=model, tools=tools)
    
    return client, agent

async def run_agent():
    client, agent = await create_agent()
    
    try:
        # Example: Run the agent with a prompt
        result = await agent.run("What files are in the current directory?")
        print(result.output)
    finally:
        # Always clean up resources
        await client.cleanup()

if __name__ == "__main__":
    asyncio.run(run_agent())
```

### Configuration File

MCP servers are configured via a JSON file (`mcp_config.json`):

```json
{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-filesystem", "/home/user/Documents"],
      "env": {}
    },
    "brave-search": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-brave-search"],
      "env": {
        "BRAVE_API_KEY": "your-api-key-here"
      }
    }
  }
}
```

## Best Practices

1. **Always clean up resources**: Use try/finally blocks to ensure `client.cleanup()` is called
2. **Error handling**: Implement robust error handling for server communication failures
3. **Logging**: Use Python's logging module to log important events and errors
4. **Tool selection**: Choose the right MCP servers based on the agent's needs
5. **System prompts**: Instruct the agent on how to effectively use the available tools

## Available MCP Servers

### Filesystem Server
- Package: `@modelcontextprotocol/server-filesystem`
- Tools: `read_file`, `write_file`, `list_directory`, etc.

### Brave Search Server
- Package: `@modelcontextprotocol/server-brave-search`
- Tools: `brave_web_search`, `brave_local_search`

### Fetch Server
- Package: `@modelcontextprotocol/server-fetch`
- Tools: `web_fetch`

### Memory Server
- Package: `@modelcontextprotocol/server-memory`
- Tools: `remember`, `recall`